geom_col() +
facet_wrap(~median_income)
library(AER)
dispersiontest(burg_poisson)
Poisson_RegModel_IncidenceProp_corr_MedIncome_QP <- glm(num_burglaries ~ median_income + population + population:median_income, family = "quasipoisson", offset = log(population), data = IncidenceProportion_byTract_ArrangeByMedIncome)
summary(Poisson_RegModel_IncidenceProp_corr_MedIncome_QP)
library(MASS)
Poisson_RegModel_IncidenceProp_corr_MedIncome_NB <- glm.nb(num_burglaries ~ median_income + population + population:median_income, offset(log(population)), data = IncidenceProportion_byTract_ArrangeByMedIncome)
summary(Poisson_RegModel_IncidenceProp_corr_MedIncome_NB)
Poisson_RegModel_IncidenceProp_corr_MedIncome_NB$theta
median_income <- seq(from = 20000, to = 180000, length.out = 5)
population = 1000
mu <- predict(Poisson_RegModel_IncidenceProp_corr_MedIncome_NB,
newdata = tibble(median_income = median_income,
population = population),
type = "response")
var <- mu + mu^2 / Poisson_RegModel_IncidenceProp_corr_MedIncome_NB$theta
map(median_income,
\(x) tibble(median_income = x,
num_burglaries = 0:20,
probability = dnbinom(0:20,
mu = predict(Poisson_RegModel_IncidenceProp_corr_MedIncome_NB,
newdata = tibble(median_income = x, population = population), type = "response"),
size = Poisson_RegModel_IncidenceProp_corr_MedIncome_NB$theta
)
)
) |>
bind_rows() |>
ggplot(aes(x = num_burglaries, y = probability)) +
geom_col() +
facet_wrap(~median_income)
#install.packages("sf")
#install.packages("leaflet")
#install.packages("lme4")
#install.packages("AER")
#install.packages("MASS")
library(sf)
library(tidyverse)
library(lme4)
CensusTracts <- st_read('../data/DC')
CensusTracts
CensusTracts |>
ggplot() +
geom_sf()
# CensusTracts |>
#   ggplot() +
#   geom_sf(aes(fill = TRACTCE))
Burglaries2023 <- read_csv("../data/burglaries_2023.csv")
Burglaries2023
Burglaries2023 <- Burglaries2023 |>
distinct(incident_number, .keep_all = TRUE) |>
drop_na(latitude)  |>
mutate(incident_occurred_date = str_sub(incident_occurred, 1, 10))  # |>
mutate(incident_occurred_date = ymd(incident_occurred_date))
#install.packages("sf")
#install.packages("leaflet")
#install.packages("lme4")
#install.packages("AER")
#install.packages("MASS")
library(sf)
library(tidyverse)
library(lme4)
CensusTracts <- st_read('../data/DC')
CensusTracts
CensusTracts |>
ggplot() +
geom_sf()
# CensusTracts |>
#   ggplot() +
#   geom_sf(aes(fill = TRACTCE))
Burglaries2023 <- read_csv("../data/burglaries_2023.csv")
Burglaries2023
Burglaries2023 <- Burglaries2023 |>
distinct(incident_number, .keep_all = TRUE) |>
drop_na(latitude)  |>
mutate(incident_occurred_date = str_sub(incident_occurred, 1, 10))  # |>
mutate(incident_occurred_date = ymd(incident_occurred_date))
#install.packages("sf")
#install.packages("leaflet")
#install.packages("lme4")
#install.packages("AER")
#install.packages("MASS")
library(sf)
library(tidyverse)
library(lme4)
CensusTracts <- st_read('../data/DC')
CensusTracts
CensusTracts |>
ggplot() +
geom_sf()
# CensusTracts |>
#   ggplot() +
#   geom_sf(aes(fill = TRACTCE))
Burglaries2023 <- read_csv("../data/burglaries_2023.csv")
Burglaries2023
Burglaries2023 <- Burglaries2023 |>
distinct(incident_number, .keep_all = TRUE) |>
drop_na(latitude)  |>
mutate(incident_occurred_date = str_sub(incident_occurred, 1, 10))  # |>
mutate(incident_occurred_date_2 = ymd(incident_occurred_date))
#install.packages("sf")
#install.packages("leaflet")
#install.packages("lme4")
#install.packages("AER")
#install.packages("MASS")
library(sf)
library(tidyverse)
library(lme4)
CensusTracts <- st_read('../data/DC')
CensusTracts
CensusTracts |>
ggplot() +
geom_sf()
# CensusTracts |>
#   ggplot() +
#   geom_sf(aes(fill = TRACTCE))
Burglaries2023 <- read_csv("../data/burglaries_2023.csv")
Burglaries2023
Burglaries2023 <- Burglaries2023 |>
distinct(incident_number, .keep_all = TRUE) |>
drop_na(latitude)  |>
mutate(incident_occurred_date = str_sub(incident_occurred, 1, 10))  |>
mutate(incident_occurred_date = ymd(incident_occurred_date))
# as_datetime(incident_occurred, tz = "UTC", format = NULL)
# |>
# select(incident_number, latitude, longitude)
Burglaries2023
# Burglaries2023 <- Burglaries2023 |>
#   mutate(
#     latitude = as.numeric(str_extract(`Mapped Location`, "\\((.+),", group = 1)),
#     longitude = as.numeric(str_extract(`Mapped Location`, ",(.+)\\)", group = 1))
#     )
CensusTracts |>
ggplot() +
geom_sf() +
geom_point(
data = Burglaries2023 |> drop_na(latitude),
aes(x = longitude, y = latitude),
size = 0.1
)
Burglaries2023_geo <- st_as_sf(
Burglaries2023 |> drop_na(latitude),
coords = c('longitude', 'latitude'),
crs = st_crs(CensusTracts)
)
Burglaries2023_geo
CensusTracts |>
ggplot() +
geom_sf() +
geom_sf(data = Burglaries2023_geo, size = 0.1)
# Burglaries2023_CensusTracts <- st_join(Burglaries2023_geo, CensusTracts, join = st_within)
# Burglaries2023_CensusTracts
Burglaries2023_CensusTracts <- st_join(Burglaries2023_geo, CensusTracts, join = st_within, left = FALSE)
Burglaries2023_CensusTracts
Burglaries2023_CensusTracts |>
filter(is.na(incident_number))
CensusTracts |>
ggplot() +
geom_sf() +
geom_sf(data = Burglaries2023_CensusTracts, size = 0.1)
Burglaries2023_CensusTracts |>
filter(is.na(incident_number))
Burglaries2023_CensusTracts |>
st_drop_geometry() |>
group_by(GEOID) |>
count(name = "incident_number") |>
arrange(desc(incident_number))
library(leaflet)
leaflet(data = Burglaries2023 |>
drop_na(latitude) # |>
#     filter(`Route Name` == "WEST END - WHITE BRIDGE")
) |>
addTiles() |>
addMarkers(~longitude,
~latitude,
popup = ~as.character(`incident_number`),
label = ~as.character(`incident_number`)
)
leaflet(Burglaries2023 |> drop_na(longitude)) %>%
addTiles() %>%
addMarkers(
~longitude,
~latitude,
clusterOptions = markerClusterOptions(),
popup = ~as.character(`incident_number`),
label = ~as.character(`incident_number`)
)
census <- read_csv("../data/census.csv")
census
Burglaries2023_CensusTracts <- Burglaries2023_CensusTracts  |>
group_by(TRACTCE) |>
summarize(num_burglaries = n_distinct(incident_number, na.rm = TRUE)) |>
arrange(desc(num_burglaries))  |>
rename(tract = TRACTCE)  |>
right_join(census)
Burglaries2023_CensusTracts
Burglaries2023_CensusTracts |>
ggplot(aes(x = population)) +
geom_histogram()
Burglaries2023_CensusTracts |>
ggplot(aes(x = median_income)) +
geom_histogram()
Burglaries2023_CensusTracts  |>
arrange(population)
Burglaries2023_CensusTracts <- Burglaries2023_CensusTracts  |>
filter(population > 0, median_income > 0)
Burglaries2023_CensusTracts |>
ggplot(aes(x = median_income)) +
geom_histogram()
Burglaries2023_CensusTracts |>
ggplot(aes(x = num_burglaries)) +
geom_histogram()
Burglaries2023_CensusTracts |>
ggplot(aes(x = median_income, y = num_burglaries)) +
geom_point()
Burglaries2023_CensusTracts  |>
mutate(burglaries_per_thousand = num_burglaries / (population/1000)) |>
ggplot(aes(x = median_income, y = burglaries_per_thousand)) +
geom_point()
Burglaries2023_CensusTracts |>
arrange(desc(num_burglaries)) |>
head(1)
IncidenceProportion_byTract <- Burglaries2023_CensusTracts |>
mutate(Incidents_Per_1000_Residents = num_burglaries / (population/1000)) |>
arrange(desc(Incidents_Per_1000_Residents)) |>
filter(Incidents_Per_1000_Residents != "Inf")
IncidenceProportion_byTract
# IncidenceCountPer1000_DeDup_byTract <- IncidenceCountPer1000_byTract[!duplicated(IncidenceCountPer1000_byTract[c('Incidents_Per_1000_Residents')]), ]
# IncidenceCountPer1000_DeDup_byTract
#
#
IncidenceProportion_byTract_ArrangeByMedIncome <- IncidenceProportion_byTract   |>
arrange(median_income)
IncidenceProportion_byTract_ArrangeByMedIncome
lr_MedIncome_IncidenceProportion <- glm(Incidents_Per_1000_Residents ~ median_income, family = gaussian(link = "identity"), data = IncidenceProportion_byTract_ArrangeByMedIncome)
summary(lr_MedIncome_IncidenceProportion)
Poisson_RegModel_IncidenceProp_corr_MedIncome <- glm(num_burglaries ~ median_income + population + population:median_income, family = "poisson", offset = log(population), data = IncidenceProportion_byTract_ArrangeByMedIncome)
summary(Poisson_RegModel_IncidenceProp_corr_MedIncome)
burg_poisson <- glm(num_burglaries ~ median_income + offset(log(population)),
family = poisson,
data =  IncidenceProportion_byTract_ArrangeByMedIncome)
summary(burg_poisson)
population = 5000
exp(-5.184 + log(population) + 40000 * -2.434e-05)
median_income <- seq(from = 20000, to = 180000, length.out = 5)
population = 1000
map(median_income,
\(x) tibble(median_income = x,
num_burglaries = 0:20,
probability = dpois(0:20,
lambda = predict(Poisson_RegModel_IncidenceProp_corr_MedIncome,
newdata = tibble(median_income = x, population = population), type = "response")
)
)
) |>
bind_rows() |>
ggplot(aes(x = num_burglaries, y = probability)) +
geom_col() +
facet_wrap(~median_income)
library(AER)
dispersiontest(burg_poisson)
Poisson_RegModel_IncidenceProp_corr_MedIncome_QP <- glm(num_burglaries ~ median_income + population + population:median_income, family = "quasipoisson", offset = log(population), data = IncidenceProportion_byTract_ArrangeByMedIncome)
summary(Poisson_RegModel_IncidenceProp_corr_MedIncome_QP)
library(MASS)
Poisson_RegModel_IncidenceProp_corr_MedIncome_NB <- glm.nb(num_burglaries ~ median_income + population + population:median_income, offset(log(population)), data = IncidenceProportion_byTract_ArrangeByMedIncome)
summary(Poisson_RegModel_IncidenceProp_corr_MedIncome_NB)
Poisson_RegModel_IncidenceProp_corr_MedIncome_NB$theta
median_income <- seq(from = 20000, to = 180000, length.out = 5)
population = 1000
mu <- predict(Poisson_RegModel_IncidenceProp_corr_MedIncome_NB,
newdata = tibble(median_income = median_income,
population = population),
type = "response")
var <- mu + mu^2 / Poisson_RegModel_IncidenceProp_corr_MedIncome_NB$theta
map(median_income,
\(x) tibble(median_income = x,
num_burglaries = 0:20,
probability = dnbinom(0:20,
mu = predict(Poisson_RegModel_IncidenceProp_corr_MedIncome_NB,
newdata = tibble(median_income = x, population = population), type = "response"),
size = Poisson_RegModel_IncidenceProp_corr_MedIncome_NB$theta
)
)
) |>
bind_rows() |>
ggplot(aes(x = num_burglaries, y = probability)) +
geom_col() +
facet_wrap(~median_income)
#install.packages("sf")
#install.packages("leaflet")
#install.packages("lme4")
#install.packages("AER")
#install.packages("MASS")
library(sf)
library(tidyverse)
library(lme4)
CensusTracts <- st_read('../data/DC')
CensusTracts
CensusTracts |>
ggplot() +
geom_sf()
# CensusTracts |>
#   ggplot() +
#   geom_sf(aes(fill = TRACTCE))
Burglaries2023 <- read_csv("../data/burglaries_2023.csv")
Burglaries2023
Burglaries2023 <- Burglaries2023 |>
distinct(incident_number, .keep_all = TRUE) |>
drop_na(latitude)  |>
mutate(incident_occurred_date = str_sub(incident_occurred, 1, 10))  |>
mutate(incident_occurred_date = ymd(incident_occurred_date))
# as_datetime(incident_occurred, tz = "UTC", format = NULL)
# |>
# select(incident_number, latitude, longitude)
Burglaries2023
# Burglaries2023 <- Burglaries2023 |>
#   mutate(
#     latitude = as.numeric(str_extract(`Mapped Location`, "\\((.+),", group = 1)),
#     longitude = as.numeric(str_extract(`Mapped Location`, ",(.+)\\)", group = 1))
#     )
CensusTracts |>
ggplot() +
geom_sf() +
geom_point(
data = Burglaries2023 |> drop_na(latitude),
aes(x = longitude, y = latitude),
size = 0.1
)
Burglaries2023_geo <- st_as_sf(
Burglaries2023 |> drop_na(latitude),
coords = c('longitude', 'latitude'),
crs = st_crs(CensusTracts)
)
Burglaries2023_geo
CensusTracts |>
ggplot() +
geom_sf() +
geom_sf(data = Burglaries2023_geo, size = 0.1)
# Burglaries2023_CensusTracts <- st_join(Burglaries2023_geo, CensusTracts, join = st_within)
# Burglaries2023_CensusTracts
Burglaries2023_CensusTracts <- st_join(Burglaries2023_geo, CensusTracts, join = st_within, left = FALSE)
Burglaries2023_CensusTracts
Burglaries2023_CensusTracts |>
filter(is.na(incident_number))
CensusTracts |>
ggplot() +
geom_sf() +
geom_sf(data = Burglaries2023_CensusTracts, size = 0.1)
Burglaries2023_CensusTracts |>
filter(is.na(incident_number))
Burglaries2023_CensusTracts |>
st_drop_geometry() |>
group_by(GEOID) |>
count(name = "incident_number") |>
arrange(desc(incident_number))
library(leaflet)
leaflet(data = Burglaries2023 |>
drop_na(latitude) # |>
#     filter(`Route Name` == "WEST END - WHITE BRIDGE")
) |>
addTiles() |>
addMarkers(~longitude,
~latitude,
popup = ~as.character(`incident_number`),
label = ~as.character(`incident_number`)
)
leaflet(Burglaries2023 |> drop_na(longitude)) %>%
addTiles() %>%
addMarkers(
~longitude,
~latitude,
clusterOptions = markerClusterOptions(),
popup = ~as.character(`incident_number`),
label = ~as.character(`incident_number`)
)
census <- read_csv("../data/census.csv")
census
Burglaries2023_CensusTracts <- Burglaries2023_CensusTracts  |>
group_by(TRACTCE) |>
summarize(num_burglaries = n_distinct(incident_number, na.rm = TRUE)) |>
arrange(desc(num_burglaries))  |>
rename(tract = TRACTCE)  |>
right_join(census)
Burglaries2023_CensusTracts
Burglaries2023_CensusTracts |>
ggplot(aes(x = population)) +
geom_histogram()
Burglaries2023_CensusTracts |>
ggplot(aes(x = median_income)) +
geom_histogram()
Burglaries2023_CensusTracts  |>
arrange(population)
Burglaries2023_CensusTracts <- Burglaries2023_CensusTracts  |>
filter(population > 0, median_income > 0)
Burglaries2023_CensusTracts |>
ggplot(aes(x = median_income)) +
geom_histogram()
Burglaries2023_CensusTracts |>
ggplot(aes(x = num_burglaries)) +
geom_histogram()
Burglaries2023_CensusTracts |>
ggplot(aes(x = median_income, y = num_burglaries)) +
geom_point()
Burglaries2023_CensusTracts  |>
mutate(burglaries_per_thousand = num_burglaries / (population/1000)) |>
ggplot(aes(x = median_income, y = burglaries_per_thousand)) +
geom_point()
Burglaries2023_CensusTracts |>
arrange(desc(num_burglaries)) |>
head(1)
IncidenceProportion_byTract <- Burglaries2023_CensusTracts |>
mutate(Incidents_Per_1000_Residents = num_burglaries / (population/1000)) |>
arrange(desc(Incidents_Per_1000_Residents)) |>
filter(Incidents_Per_1000_Residents != "Inf")
IncidenceProportion_byTract
# IncidenceCountPer1000_DeDup_byTract <- IncidenceCountPer1000_byTract[!duplicated(IncidenceCountPer1000_byTract[c('Incidents_Per_1000_Residents')]), ]
# IncidenceCountPer1000_DeDup_byTract
#
#
IncidenceProportion_byTract_ArrangeByMedIncome <- IncidenceProportion_byTract   |>
arrange(median_income)
IncidenceProportion_byTract_ArrangeByMedIncome
lr_MedIncome_IncidenceProportion <- glm(Incidents_Per_1000_Residents ~ median_income, family = gaussian(link = "identity"), data = IncidenceProportion_byTract_ArrangeByMedIncome)
summary(lr_MedIncome_IncidenceProportion)
Poisson_RegModel_IncidenceProp_corr_MedIncome <- glm(num_burglaries ~ median_income + population + population:median_income, family = "poisson", offset = log(population), data = IncidenceProportion_byTract_ArrangeByMedIncome)
summary(Poisson_RegModel_IncidenceProp_corr_MedIncome)
burg_poisson <- glm(num_burglaries ~ median_income + offset(log(population)),
family = poisson,
data =  IncidenceProportion_byTract_ArrangeByMedIncome)
summary(burg_poisson)
population = 5000
exp(-5.184 + log(population) + 40000 * -2.434e-05)
median_income <- seq(from = 20000, to = 180000, length.out = 5)
population = 1000
map(median_income,
\(x) tibble(median_income = x,
num_burglaries = 0:20,
probability = dpois(0:20,
lambda = predict(Poisson_RegModel_IncidenceProp_corr_MedIncome,
newdata = tibble(median_income = x, population = population), type = "response")
)
)
) |>
bind_rows() |>
ggplot(aes(x = num_burglaries, y = probability)) +
geom_col() +
facet_wrap(~median_income)
library(AER)
dispersiontest(burg_poisson)
Poisson_RegModel_IncidenceProp_corr_MedIncome_QP <- glm(num_burglaries ~ median_income + population + population:median_income, family = "quasipoisson", offset = log(population), data = IncidenceProportion_byTract_ArrangeByMedIncome)
summary(Poisson_RegModel_IncidenceProp_corr_MedIncome_QP)
library(MASS)
Poisson_RegModel_IncidenceProp_corr_MedIncome_NB <- glm.nb(num_burglaries ~ median_income + population + population:median_income, offset(log(population)), data = IncidenceProportion_byTract_ArrangeByMedIncome)
summary(Poisson_RegModel_IncidenceProp_corr_MedIncome_NB)
Poisson_RegModel_IncidenceProp_corr_MedIncome_NB$theta
median_income <- seq(from = 20000, to = 180000, length.out = 5)
population = 1000
mu <- predict(Poisson_RegModel_IncidenceProp_corr_MedIncome_NB,
newdata = tibble(median_income = median_income,
population = population),
type = "response")
var <- mu + mu^2 / Poisson_RegModel_IncidenceProp_corr_MedIncome_NB$theta
map(median_income,
\(x) tibble(median_income = x,
num_burglaries = 0:20,
probability = dnbinom(0:20,
mu = predict(Poisson_RegModel_IncidenceProp_corr_MedIncome_NB,
newdata = tibble(median_income = x, population = population), type = "response"),
size = Poisson_RegModel_IncidenceProp_corr_MedIncome_NB$theta
)
)
) |>
bind_rows() |>
ggplot(aes(x = num_burglaries, y = probability)) +
geom_col() +
facet_wrap(~median_income)
shiny::runApp('~/My_Documents/NSS_DS8_Projects/r-shiny-Burglaries-MultidisciplinaryDeepDives_/burglaries_map')
setwd("~/My_Documents/NSS_DS8_Projects/r-shiny-Burglaries-MultidisciplinaryDeepDives_/burglaries_map")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
